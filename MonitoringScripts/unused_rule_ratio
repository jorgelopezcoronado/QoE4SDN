#! /usr/bin/perl

#Requires a unique ID (UUID) for grouping the data 
### $ ./unused_rule_ratio 1174aa8b-4f1b-497a-bf16-3550f8964da7 
### $
### On successful completion returns 0. 
### Unuscessful completion reports to stdout and returns other code. 

#Return Codes:
# 1 = wrong parameters.
# 2 = couldn't perform operation on controller
# 3 = inconssitent information between queries
# 4 = Error with DB insert 

use REST::Client;
use JSON;
use MIME::Base64;
use DBI;
use Math::Complex;


my $debug = 0;


#Print usage
sub help_text
{
	my $text = <<ENDTEXT;
Usage:$0 [-h|--help|--h] <Group_ID>
	-h 
		Prints this message, the program help.
	Group_ID
		A unique ID (UUID) for grouping the measurements.
ENDTEXT
	return $text;	
}

sub feature_name
{
	return "unused_rule_ratio";
}

my $controller_ip;
my $onos_user;
my $onos_password;

my $db_ip;
my $db_name;
my $db_user;
my $db_pass;

my $group_id;

##These are constants... maybe I should've capitalized... but, whatever
my $flow_data_uri;

sub setup
{
	if (scalar(@_) != 1)
	{
		print("Error! The transaction's group id (UUID) must be supplied!\n");
		print(help_text());
		exit(1);
	}

	($group_id) = @_;

	$controller_ip = (exists($ENV{'CONTROLLER_IP'}))?$ENV{'CONTROLLER_IP'}:"localhost";
	$onos_user = (exists($ENV{'ONOS_USER'}))?$ENV{'ONOS_USER'}:"onos";
	$onos_pass = (exists($ENV{'ONOS_PASS'}))?$ENV{'ONOS_PASS'}:"rocks";

	$db_ip = (exists($ENV{'DB_IP'}))?$ENV{'DB_IP'}:"localhost";
	$db_name = (exists($ENV{'DB_NAME'}))?$ENV{'DB_NAME'}:"qoe_db";
	$db_user = (exists($ENV{'DB_USER'}))?$ENV{'DB_USER'}:"qoe_user";
	$db_pass = (exists($ENV{'DB_PASS'}))?$ENV{'DB_USER'}:"MPCLGP5432!";

	##These are constants... maybe I should've capitalized... but, whatever
	my $base_request_uri = "http://$controller_ip:8181/onos/v1";
	$flow_data_uri = $base_request_uri . "/flows";

	if ($debug)
	{
		print ("Controller IP=".$controller_ip."\n");
		print ("Onos User=".$onos_user."\n");
		print ("Onos Password=".$onos_pass."\n");
		print ("Onos auth = ".encode_base64($onos_user.":".$onos_pass));

		print ("DN IP=".$db_ip."\n");
		print ("DB Name=".$db_name."\n");
		print ("DB User=".$db_user."\n");
		print ("DB Pass=".$db_pass."\n");

		print ("Group ID=".$group_id."\n");

	}	

}


sub insert_DB 
{
	if (scalar(@_) != 1)
	{
		print("Insert DB functino called without a value to insert!\n");
		exit(3);
	}

	(my $ratio) = @_;

	my $query = "INSERT INTO measure (datetime, parameter, value, groupid) VALUES (CURRENT_TIMESTAMP, '".feature_name()."', $ratio, '$group_id');";	
	my $connection = DBI->connect("DBI:Pg:dbname=$db_name;host=$db_ip", $db_user, $db_pass);
	my $statement = $connection->prepare($query);
	my $result = $statement->execute(); 
	if (!$result)
	{
		print $query."\n";
		print $statement->errstr."\n";
		exit (4);
	}
}

sub main
{


	if (scalar(@_) != 1)
	{
		print("Error! The transaction's group id (UUID) must be supplied!\n");
		print(help_text());
		exit(1);
	}
	
	setup(@_);

	my $client = REST::Client->new();

	#Start getting the matched packets
	$client->GET($flow_data_uri, {'Authorization' => "Basic ".encode_base64($onos_user.":".$onos_pass), 'Accept' => 'application/json'});
	if( !(($client->responseCode() eq '200') or ($client->responseCode() eq '201')))
	{
    		print "Error! Response Code ".$client->responseCode()."\n";
    		print "Response\n".$client->responseContent()."\n";
		exit (2);
	}

	my $flows = from_json($client->responseContent());

	my $num_flows = 0;
	my $non_used  = 0;

	foreach (@{$flows->{flows}})
	{
	 	$num_flows++;	
		$non_used += ($_->{packets} == 0)? 1: 0;	
		print ("flow ".$_->{id}." ".$_->{packets}."\n");
		
	}

	my $ratio = ($non_used != 0)? $non_used / $num_flows * 100: 0;

	#my $average  = $packets / $num_flows;
	#my $squared_error = 0;

	#print($packets." / ".$num_flows."= ".$average."\n");
	
	#foreach (@{$flows->{flows}})
	#{
	#	$squared_error += ($_->{packets} - $average)*($_->{packets} - $average);
	#}

	#print ("e^2 = ".$squared_error." s= ".sqrt($squared_error / $num_flows)."\n");

	insert_DB ($ratio);	

}

main(@ARGV);

exit 0;
